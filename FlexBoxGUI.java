package flexbox;
import java.awt.Component;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTextField;


/**
 * The FlexBoxGUI Class represents the interface of the application.
 * It also handles functions of a main class
 * @author UP616167
 */
public class FlexBoxGUI extends javax.swing.JFrame {

    private String unitMeasure = "m";
    private int cardGrade;
    private int colourPrint;
    private boolean reinforcedBottom = false;
    private boolean reinforcedCorners = false;
    private double boxWidth;
    private static final double minWidth = 0.5; // the minimum width of a box
    private static final double maxWidth = 10.0; // the maximum width of a box
    private double boxHeight;
    private static final double minHeight = 0.5; // the minimum height of a box
    private static final double maxHeight = 10.0; // the maximum height of a box
    private double boxLength;
    private static final double minLength = 0.5; // the minimun length of a box
    private static final double maxLength = 10.0; // the maximum length of a box
    private boolean sealableTops = false;
    private int quantity;
    private static final int minQuantity = 1; // the minimum quantity of a box type that can be ordered
    private static final int maxQuantity = 100; // the maximum quantity of a box type that can be ordered
    private static ArrayList<BoxType> BoxTypes;
    private static int[] cardGrades;
    private static BoxType foundBoxType;
    private static OrderManager orderManager;
    protected final static double[] basicCost = {0.45,0.59,0.68,0.92,1.30}; // the basic cost of 1 square metre of card 
    protected final static double[] colourCost = {12,15}; // additional cost for colours
    protected final static int sealableTopsCost = 5; // additional cost for sealable tops
    protected final static int reinforcedBottomCost = 10; // additional cost for reinforced bottom
    protected final static int reinforcedCornersCost = 7; // additional cost for reinforced corners
    private DefaultListModel orderList;
    
    /**
     * Creates new form FlexBoxGUI
     */
    public FlexBoxGUI() {
        
        //initialise the components of the GUI
        initComponents();
        //initialise the variables of the System
        systemInit();
        //hide the radio button used for clearing
        radioClear.setVisible(false);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colour = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        reinfB = new javax.swing.JCheckBox();
        reinfC = new javax.swing.JCheckBox();
        sealable = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        submitOrder = new javax.swing.JButton();
        width = new javax.swing.JTextField();
        height = new javax.swing.JTextField();
        boxQuantity = new javax.swing.JTextField();
        length = new javax.swing.JTextField();
        widthError = new javax.swing.JLabel();
        radioClear = new javax.swing.JRadioButton();
        colourPrintError = new javax.swing.JLabel();
        heightError = new javax.swing.JLabel();
        lengthError = new javax.swing.JLabel();
        gradeError = new javax.swing.JLabel();
        quantityError = new javax.swing.JLabel();
        typeError = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        grade = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        totalCost = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderDetails = new javax.swing.JList();
        removeOrder = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FlexBox Ordering System v2.5");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Order input"));
        jPanel1.setName("Order details"); // NOI18N

        jLabel2.setText("Enter the details of your order in the boxes below:");

        jLabel3.setText("Box Width:");

        jLabel4.setText("Box Height:");

        jLabel5.setText("Box Length:");

        jLabel6.setText("Grade of card:");

        jLabel7.setText("Colour Printing:");

        colour.add(jRadioButton1);
        jRadioButton1.setText("None");

        colour.add(jRadioButton2);
        jRadioButton2.setText("1");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        colour.add(jRadioButton3);
        jRadioButton3.setText("2");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        reinfB.setText("Reinforced Bottom");
        reinfB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reinfBActionPerformed(evt);
            }
        });

        reinfC.setText("Reinforced Corners");

        sealable.setText("Sealable Tops");
        sealable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sealableActionPerformed(evt);
            }
        });

        jLabel11.setText("Quantity:");

        jLabel8.setText("Additional features:");

        submitOrder.setText("Submit Order");
        submitOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitOrderActionPerformed(evt);
            }
        });

        width.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthActionPerformed(evt);
            }
        });

        boxQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxQuantityActionPerformed(evt);
            }
        });

        widthError.setForeground(new java.awt.Color(255, 0, 0));
        widthError.setToolTipText("");
        widthError.setName("errorLabel"); // NOI18N

        colour.add(radioClear);
        radioClear.setText("clearRadioButton");
        radioClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioClearActionPerformed(evt);
            }
        });

        colourPrintError.setForeground(new java.awt.Color(255, 0, 0));
        colourPrintError.setToolTipText("");
        colourPrintError.setName("errorLabel"); // NOI18N

        heightError.setForeground(new java.awt.Color(255, 0, 0));
        heightError.setToolTipText("");
        heightError.setName("errorLabel"); // NOI18N

        lengthError.setForeground(new java.awt.Color(255, 0, 0));
        lengthError.setToolTipText("");
        lengthError.setName("errorLabel"); // NOI18N

        gradeError.setForeground(new java.awt.Color(255, 0, 0));
        gradeError.setToolTipText("");
        gradeError.setName("errorLabel"); // NOI18N

        quantityError.setForeground(new java.awt.Color(255, 0, 0));
        quantityError.setToolTipText("");
        quantityError.setName("errorLabel"); // NOI18N

        typeError.setForeground(new java.awt.Color(255, 0, 0));
        typeError.setToolTipText("");
        typeError.setName("errorLabel"); // NOI18N

        jLabel9.setText("m");

        jLabel10.setText("m");

        jLabel12.setText("m");

        jLabel14.setText("(1-100)");

        grade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--select--", "1", "2", "3", "4", "5" }));
        grade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(typeError)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addComponent(jLabel8)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(submitOrder)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                                        .addComponent(radioClear))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton2)
                                            .addComponent(jRadioButton3)
                                            .addComponent(reinfC)
                                            .addComponent(sealable)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jRadioButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(colourPrintError))
                                            .addComponent(reinfB)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(length)
                                                    .addComponent(width)
                                                    .addComponent(height, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel10)
                                                            .addComponent(jLabel9))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(heightError)
                                                            .addComponent(widthError)))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jLabel12)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(lengthError))))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(boxQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel14)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(quantityError))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(grade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(gradeError)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jLabel2))
                        .addGap(136, 136, 136))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9)
                    .addComponent(widthError))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10)
                    .addComponent(heightError))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(length, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel12)
                    .addComponent(lengthError))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(grade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gradeError))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jLabel7)
                    .addComponent(colourPrintError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reinfB)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reinfC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sealable)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel14)
                    .addComponent(quantityError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submitOrder)
                    .addComponent(radioClear))
                .addGap(13, 13, 13)
                .addComponent(typeError)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Order output"));

        jLabel1.setText("Total:");

        totalCost.setText("0.0");

        jScrollPane1.setViewportView(orderDetails);

        removeOrder.setText("Remove");
        removeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeOrderActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("£");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(totalCost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(removeOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(totalCost)
                    .addComponent(jLabel15))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FlexBoxGUI().setVisible(true);
            }
        });
    }
   
    /**
     * Initializes the variables of the system
     */
    private void systemInit() {
        
        //initialise the model of the list from the GUI which will display the ordered boxes
        orderList = new DefaultListModel();
        orderDetails.setModel(orderList);
        
        //initialise the types of boxes 
        boxTypesInit();

    }
    
    private void boxTypesInit() {
        //create the array of boxtypes
        BoxTypes = new ArrayList<>();
        cardGrades = new int[]{1,2,3};
        //create the first boxtype and add it to the ArrayList
        BoxType boxType1 = new SimpleBoxType(cardGrades);
        BoxTypes.add(boxType1);
        //create the 2nd boxtype and add it to the ArrayList
        cardGrades = new int[]{2,3,4};
        BoxType boxType2 = new ColoredBoxType(cardGrades, 1);
        BoxTypes.add(boxType2);
        //create the 3rd boxtype and add it to the ArrayList
        cardGrades = new int[]{2,3,4,5};
        BoxType boxType3 = new ColoredBoxType(cardGrades, 2);
        BoxTypes.add(boxType3);
        //create the 4th boxtype and add it to the ArrayList
        cardGrades = new int[]{2,3,4,5};
        BoxType boxType4 = new ReinforcedBoxType(cardGrades, 2, true, false);
        BoxTypes.add(boxType4);
        //create the 5th boxtype and add it to the ArrayList
        cardGrades = new int[]{3,4,5};
        BoxType boxType5 = new ReinforcedBoxType(cardGrades, 2, true, true);
        BoxTypes.add(boxType5);
        //end boxtypes creation
    }
    

    
    
    /**
     * Checks if the type of box can be supplied
     * @return true if the box can be supplied, false otherwise
     */
    private boolean canBeSupplied() {
        //check if the requested type of box can be supplied
        setTypeError("");
        boolean found = false;

        for(BoxType boxType : BoxTypes )
        {    

            if(colourPrint == boxType.getColourPrint() 
            && reinforcedBottom == boxType.getReinforcedBottom() 
            && reinforcedCorners == boxType.getReinforcedCorners()
            && boxType.containsGrade(cardGrade))
                { 
                found = true;
                foundBoxType = boxType;
                //overwrite the card grade range of the found box type with an array formed by a single value
                foundBoxType.setCardGrade(cardGrade);
                break;
                } 
        }
        //end check
        return found;
    }
    
    /*
     * If the box can be supplied, it adds it to the order and displays the total price of the order
     * If not, displays an error message.
     */
    private void placeOrder() {
                                     
        //create an object which represents the ordered box
        Box orderedBox = new Box(foundBoxType, boxWidth, boxHeight, boxLength, sealableTops);

        //create an order which contains the orderedBox and the quantity of this box
        Order order = new Order(orderedBox, quantity);

        //check if the orderManager has been created
        if(orderManager == null)
        {
            //create an instance of OrderManager 
            orderManager = new OrderManager();
            //end creation
        }

        //add the order to orderManager
        orderManager.addOrder(order);
        displayOrderInList();
        displayTotalCost(orderManager.cost());
 
    }
    
    /*
     * Validates the width input
     */    
    private void validateWidth() {
        
        boolean error = false;
        widthError.setText("");
                
        String widthInput = width.getText();
        if("".equals(widthInput))
        {
            error = true;
            widthError.setText("*the input cannot be empty!");
        }
        else
        {
            try {
            boxWidth = Double.parseDouble(widthInput);
            }
            catch (Exception e) 
            {
             //System.err.println(e);
             error = true;
             widthError.setText("*the width must be a float number!");
            }
        }
        if(error == false)
        {
            if(boxWidth < minWidth)
            {
                widthError.setText("*the width value must be greater than or equal with "+minWidth+" "+unitMeasure);
            }
            else
            if(boxWidth > maxWidth)
            {
                widthError.setText("*the width value must be less than or equal with "+maxWidth+" "+unitMeasure);
            }
        }
    }
    
    /*
     * Validates the height input
     */
    private void validateHeight() {
        
        boolean error = false;
        heightError.setText("");
                
        String heightInput = height.getText();
        if("".equals(heightInput))
        {
            error = true;
            heightError.setText("*the input cannot be empty!");
        }
        else
        {
            try {
            boxHeight = Double.parseDouble(heightInput);
            }
            catch (Exception e) 
            {
             //System.err.println(e);
             error = true;
             heightError.setText("*the height must be a float number!");
            }
        }
        if(error == false)
        {
            if(boxHeight < minHeight)
            {
                heightError.setText("*the height value must be greater than or equal with "+minHeight+" "+unitMeasure);
            }
            else
            if(boxHeight > maxHeight)
            {
                heightError.setText("*the height value must be less than or equal with "+maxHeight+" "+unitMeasure);
            }
        }
    }

    /*
     * Validates the length input
     */
    private void validateLength() {
        
        boolean error = false;
        lengthError.setText("");
                
        String lengthInput = length.getText();
        if("".equals(lengthInput))
        {
            error = true;
            lengthError.setText("*the input cannot be empty!");
        }
        else
        {
            try {
            boxLength = Double.parseDouble(lengthInput);
            }
            catch (Exception e) 
            {
             //System.err.println(e);
             error = true;
             lengthError.setText("*the length must be a float number!");
            }
        }
        if(error == false)
        {
            if(boxLength < minLength)
            {
                lengthError.setText("*the length value must be greater than or equal with "+minLength+" "+unitMeasure);
            }
            else
            if(boxLength > maxLength)
            {
                lengthError.setText("*the length value must be less than or equal with "+maxLength+" "+unitMeasure);
            }
        }
    }

    /*
     * Validates the quantity input
     */
    private void validateQuantity() {
        
        boolean error = false;
        quantityError.setText("");
                
        String quantityInput = boxQuantity.getText();
        if("".equals(quantityInput))
        {
            error = true;
            quantityError.setText("*the input cannot be empty!");
        }
        else
        {
            try {
            quantity = Integer.parseInt(quantityInput);
            }
            catch (Exception e) 
            {
             //System.err.println(e);
             error = true;
             quantityError.setText("*the quantity must be a natural number!");
            }
        }
        if(error == false)
        {
            if(quantity < minQuantity)
            {
                quantityError.setText("*the quantity value must be greater than or equal with "+minQuantity);
            }
            else
            if(quantity > maxQuantity)
            {
                quantityError.setText("*the quantity value must be less than or equal with "+maxQuantity);
            }
        }
    }

    /*
     * Validates the selected card grade
     */
    private void validateGrade() {
        
        gradeError.setText("");
                
        String gradeInput = (String) grade.getSelectedItem();
            try {
                cardGrade = Integer.parseInt(gradeInput);
            }
            catch (Exception e) 
            {
             //System.err.println(e);
             gradeError.setText("*you need to select a card grade!");
            }
        
    }

    /*
     * Validates the colour print input
     */
    private void validateColourPrint() {
        
        //colour printing validation
        Enumeration<AbstractButton> colours = colour.getElements();
        boolean selected = false;
        String colourPrinting = "";
        int i=0;
        while (colours.hasMoreElements() && i<3) {
            i++;
            AbstractButton checkbox = colours.nextElement();
            if(checkbox.isSelected())
            {
                colourPrinting = checkbox.getText();
                if("None".equals(colourPrinting))
                {
                    colourPrinting = "0";
                }
                selected = true;
                colourPrint = Integer.parseInt(colourPrinting);
                if(!"".equals(colourPrintError.getText()))
                {
                    colourPrintError.setText("");
                }
                break;
            }

        }
        if(selected == false)
        {
            colourPrintError.setText("*you need to select a colour printing !");
        }
      
    }

    /*
     * Validates the user inputs
     */
    private void validateInputs() {
        validateWidth();
        validateHeight();
        validateLength();
        validateGrade();
        validateQuantity();
        validateColourPrint();
        sealableTops = sealable.isSelected();
        reinforcedBottom = reinfB.isSelected();
        reinforcedCorners = reinfC.isSelected();
        

    }
    
    /*
     * Resets input fields, checkboxes, radio buttons, drop-down lists and error labels
     */
    private void resetFields() {
        for(Component component:jPanel1.getComponents())
           {
               if(component instanceof JTextField)
               {
                   ((JTextField) component).setText("");
               }
               else
               if(component instanceof JCheckBox)
               {
                   ((JCheckBox) component).setSelected(false);
                   
               }
               else
               if("errorLabel".equals(component.getName()))
               {
                   ((JLabel) component).setText("");
               }
           }
        radioClear.doClick();
        grade.setSelectedIndex(0);
    }

    /*
     * Sets an error message if the type of box can not be supplied
     * Also used to clear the label before a new order
     */
    private void setTypeError(String error) {
        typeError.setText(error);
    }
    
    /*
     * Displays the order details on the screen
     */
    private void displayOrderInList() {
        String output = quantity + " x Box (width: " + boxWidth + unitMeasure + "; height: " + boxHeight + unitMeasure +
                             "; length: " + boxLength + unitMeasure + "; grade: " + cardGrade + "; colour: " + colourPrint +"; ";
        if(reinforcedBottom) {
            output = output + "with reinforced bottom; ";
        }
        if(reinforcedCorners) {
            output = output + "with reinforced corners; ";
        }
        if(sealableTops) {
            output = output + "with sealable tops; ";
        }
        output = output + ")";
        orderList.addElement(output);
    }
    
    /*
     * Displays the total cost of the order on the screen
     */
    private void displayTotalCost(double cost) {
        DecimalFormat costFormat = new DecimalFormat("#.##");
        totalCost.setText(costFormat.format(cost));
    }
    
    /*
     * Checks if there are any set errors and if the box can be supplied
     */
    private void checkErrors() {
        if(!"".equals(heightError.getText()) || !"".equals(widthError.getText()) || !"".equals(lengthError.getText()) ||
           !"".equals(quantityError.getText()) || !"".equals(colourPrintError.getText()) || !"".equals(gradeError.getText()))
        {
            
        }
        else
        {
            //check if the type of box can be supplied
            if(canBeSupplied())
            {
                placeOrder(); // place the order and display the total cost
                resetFields(); // reset the fields before a new order
                boxTypesInit(); // we have to re-initialise the box types because we modified the card grade of a box type when we created the box so that it had only one value in the array
                
            }
            else
            {
                setTypeError("This type of box cannot be supplied ! Please try another configuration !");
            }
        }
    }
    
    /*
     * Removes an order
     */
    private void removeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOrderActionPerformed
        
        int orderIndex = orderDetails.getSelectedIndex();
        //System.out.println(orderIndex);
        if(orderIndex != -1)
        {
            orderList.remove(orderIndex); // remove the order from the JList
            orderManager.removeOrderByID(orderIndex); // remove the order from the system
            displayTotalCost(orderManager.cost()); // display the total cost after the order has been removed
            
        }
    }//GEN-LAST:event_removeOrderActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void radioClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioClearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioClearActionPerformed

    private void boxQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxQuantityActionPerformed

    private void widthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_widthActionPerformed

    /*
     * Validates and displays the submitted order
     */
    private void submitOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitOrderActionPerformed
        // TODO add your handling code here:
        validateInputs(); // validate the user inputs
        checkErrors(); //check if there are any errors and proceed with the order
        //end validation
    }//GEN-LAST:event_submitOrderActionPerformed

    private void sealableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sealableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sealableActionPerformed

    private void reinfBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reinfBActionPerformed

    }//GEN-LAST:event_reinfBActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void gradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField boxQuantity;
    private javax.swing.ButtonGroup colour;
    private javax.swing.JLabel colourPrintError;
    private javax.swing.JButton exitButton;
    private javax.swing.JComboBox grade;
    private javax.swing.JLabel gradeError;
    private javax.swing.JTextField height;
    private javax.swing.JLabel heightError;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField length;
    private javax.swing.JLabel lengthError;
    private javax.swing.JList orderDetails;
    private javax.swing.JLabel quantityError;
    private javax.swing.JRadioButton radioClear;
    private javax.swing.JCheckBox reinfB;
    private javax.swing.JCheckBox reinfC;
    private javax.swing.JButton removeOrder;
    private javax.swing.JCheckBox sealable;
    private javax.swing.JButton submitOrder;
    private javax.swing.JLabel totalCost;
    private javax.swing.JLabel typeError;
    private javax.swing.JTextField width;
    private javax.swing.JLabel widthError;
    // End of variables declaration//GEN-END:variables
}
